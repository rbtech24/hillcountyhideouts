Based on our experience deploying your Hill Country website to Render, here's a comprehensive guide for future Replit-to-Render deployments:

🚀 Complete Render Deployment Guide for Replit Projects
Pre-Deployment Checklist
✅ Project Structure Requirements

Ensure your project has both frontend (client) and backend (server) properly separated
Verify all static assets are in accessible directories
Test that your project builds successfully locally with npm run build
✅ Environment Configuration

Use dynamic port handling: const port = process.env.PORT || 5000
Set proper NODE_ENV detection for production vs development
Add health check endpoint: app.get('/health', (req, res) => res.json({status: 'healthy'}))
Critical Build Configuration Issues
🔧 Vite Build Path Problem

// In vite.config.ts, ensure proper build output:
build: {
  outDir: path.resolve(import.meta.dirname, "dist/public"),
  emptyOutDir: true,
}
🔧 Production Server Setup
Create a separate production server file that:

Doesn't import development dependencies (like Vite)
Serves static files from the correct build directory
Uses proper file paths for built assets
🔧 Docker Configuration

# Use npx for build commands
RUN npx vite build && npx esbuild server/production.ts --platform=node --packages=external --bundle --format=esm --outfile=dist/server.js
# Avoid conflicting esbuild parameters
# DON'T use both --outdir and --outfile together
# Copy static assets to build directory
RUN cp -r attached_assets dist/
Common Deployment Failures & Solutions
❌ "Cannot find package 'vite'" Error

Cause: Production server importing development dependencies
Solution: Create dedicated production server without dev imports
❌ "Cannot use both outfile and outdir" Error

Cause: Conflicting esbuild parameters
Solution: Use only --outfile for single output files
❌ "ENOENT: no such file or directory" Error

Cause: Server looking for files in wrong directory
Solution: Match server paths to Vite build output (dist/public/)
❌ White page on deployment

Cause: Frontend files not served correctly
Solution: Update static file serving paths in production server
Render Configuration Files
render.yaml

services:
  - type: web
    name: your-project-name
    env: node
    plan: free
    buildCommand: npm install && npx vite build && npx esbuild server/production.ts --platform=node --packages=external --bundle --format=esm --outfile=dist/server.js
    startCommand: NODE_ENV=production node dist/server.js
    envVars:
      - key: NODE_ENV
        value: production
      - key: NODE_OPTIONS
        value: "--max-old-space-size=512"
    healthCheckPath: /health
File Structure Best Practices
project/
├── client/           # Frontend code
├── server/           # Backend code
├── server/production.ts  # Clean production server
├── attached_assets/  # Static assets
├── Dockerfile        # Container config
├── render.yaml       # Render config
└── package.json      # Dependencies
Testing Before Deployment
Local Build Test: Run npm run build and verify no errors
File Path Verification: Check that built files are in expected locations
Asset Loading: Ensure images and static files are accessible
API Endpoints: Test all backend routes work correctly
Deployment Strategy
Start Simple: Deploy with basic configuration first
Incremental Fixes: Address one error at a time rather than multiple changes
Log Monitoring: Watch Render build logs for specific error messages
Static vs Dynamic: Consider using Render's static site hosting for frontend-only projects